#!/usr/bin/env bash
#
# rancherclusterctx(1) is a utility to manage and switch between rancher clusters.

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SELF_CMD="$0"
RANCHERCLUSTERCTX="${XDG_CACHE_HOME:-$HOME/.rancher}/rancherclusterctx"
RANCHER_CLI_CONFIG="${RANCHER_CLI_CONFIG:-$HOME/.rancher/cli2.json}"
CURRENT_SERVER="$(cat ${RANCHER_CLI_CONFIG} | jq -r '.CurrentServer')"
CURRENT_AUTH="$(cat ${RANCHER_CLI_CONFIG} | jq -r '.Servers["'"${CURRENT_SERVER}"'"].tokenKey')"
CURRENT_URL="$(cat ${RANCHER_CLI_CONFIG} | jq -r '.Servers["'"${CURRENT_SERVER}"'"].url')"

usage() {
  cat <<"EOF"
USAGE:
  rancherclusterctx                       : list the contexts
  rancherclusterctx <NAME>                : switch to context <NAME>
  rancherclusterctx -                     : switch to the previous context
  rancherclusterctx <NEW_NAME>=<NAME>     : rename context <NAME> to <NEW_NAME>
  rancherclusterctx <NEW_NAME>=.          : rename current-context to <NEW_NAME>
  rancherclusterctx -d <NAME> [<NAME...>] : delete context <NAME> ('.' for current-context)
                                  (this command won't delete the user/cluster entry
                                  that is used by the context)

  rancherclusterctx -h,--help         : show this message
EOF
}

exit_err() {
   echo >&2 "${1}"
   exit 1
}

current_context() {
  cat ${RANCHER_CLI_CONFIG} | jq -r '.Servers["'"${CURRENT_SERVER}"'"].project'
}

get_contexts() {
    curl -fSsLu "${CURRENT_AUTH}"  "${CURRENT_URL}/v3/projects" | jq -r '.data[] | select(.description  | startswith("System project")) | .id'
}

list_contexts() {
  set -u pipefail
  local cur ctx_list
  cur="$(current_context)" || exit_err "error getting current context"
  ctx_list=$(get_contexts) || exit_err "error getting context list"

  local yellow darkbg normal
  yellow=$(tput setaf 3 || true)
  darkbg=$(tput setab 0 || true)
  normal=$(tput sgr0 || true)

  local cur_ctx_fg cur_ctx_bg
  cur_ctx_fg=${RANCHERCLUSTERCTX_CURRENT_FGCOLOR:-$yellow}
  cur_ctx_bg=${RANCHERCLUSTERCTX_CURRENT_BGCOLOR:-$darkbg}

  for c in $ctx_list; do
  if [[ -n "${_RANCHERCLUSTERCTX_FORCE_COLOR:-}" || \
       -t 1 && -z "${NO_COLOR:-}" ]]; then
    # colored output mode
    if [[ "${c}" = "${cur}" ]]; then
      echo "${cur_ctx_bg}${cur_ctx_fg}${c}${normal}"
    else
      echo "${c}"
    fi
  else
    echo "${c}"
  fi
  done
}

read_context() {
  if [[ -f "${RANCHERCLUSTERCTX}" ]]; then
    cat "${RANCHERCLUSTERCTX}"
  fi
}

save_context() {
  local saved
  saved="$(read_context)"

  if [[ "${saved}" != "${1}" ]]; then
    printf %s "${1}" > "${RANCHERCLUSTERCTX}"
  fi
}

switch_context() {
  tmp=$(mktemp)
  jq '.Servers["'"${CURRENT_SERVER}"'"].project = "'"${1}"'"' ${RANCHER_CLI_CONFIG} > "$tmp" && mv "$tmp" ${RANCHER_CLI_CONFIG}
}

choose_context_interactive() {
  local choice
  choice="$(_RANCHERCLUSTERCTX_FORCE_COLOR=1 \
    FZF_DEFAULT_COMMAND="${SELF_CMD}" \
    fzf --ansi || true)"
  if [[ -z "${choice}" ]]; then
    echo 2>&1 "error: you did not choose any of the options"
    exit 1
  else
    set_context "${choice}"
  fi
}

set_context() {
  local prev
  prev="$(current_context)" || exit_err "error getting current context"

  switch_context "${1}"

  if [[ "${prev}" != "${1}" ]]; then
    save_context "${prev}"
  fi
}

swap_context() {
  local ctx
  ctx="$(read_context)"
  if [[ -z "${ctx}" ]]; then
    echo "error: No previous context found." >&2
    exit 1
  fi
  set_context "${ctx}"
}

context_exists() {
  grep -q ^"${1}"\$ <(read_contexts)
}

rename_context() {
  echo "NOT IMPLEMENTED"
  return 1
  local old_name="${1}"
  local new_name="${2}"

  if [[ "${old_name}" == "." ]]; then
    old_name="$(current_context)"
  fi

  if context_exists "${new_name}"; then
    echo "Context \"${new_name}\" exists, deleting..." >&2
    $KUBECTL config delete-context "${new_name}" 1>/dev/null 2>&1
  fi

  $KUBECTL config rename-context "${old_name}" "${new_name}"
}

delete_contexts() {
  for i in "${@}"; do
    delete_context "${i}"
  done
}

delete_context() {
  echo "NOT IMPLEMENTED"
  return 1
  local ctx
  ctx="${1}"
  if [[ "${ctx}" == "." ]]; then
    ctx="$(current_context)" || exit_err "error getting current context"
  fi
  echo "Deleting context \"${ctx}\"..." >&2
  $KUBECTL config delete-context "${ctx}"
}

main() {
  if hash rancher 2>/dev/null; then
    RANCHER=rancher
  elif hash rancher.exe 2>/dev/null; then
    RANCHER=rancher.exe
  else
    echo >&2 "rancher cli is not installed"
    exit 1
  fi

  if [[ "$#" -eq 0 ]]; then
    if [[ -t 1 &&  -z "${RANCHERCLUSTERCTX_IGNORE_FZF:-}" && "$(type fzf &>/dev/null; echo $?)" -eq 0 ]]; then
      choose_context_interactive
    else
      list_contexts
    fi
  elif [[ "${1}" == "-d" ]]; then
    if [[ "$#" -lt 2 ]]; then
      echo "error: missing context NAME" >&2
      usage
      exit 1
    fi
    delete_contexts "${@:2}"
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many arguments" >&2
    usage
    exit 1
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == "-" ]]; then
      swap_context
    elif [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
      exit 1
    elif [[ "${1}" =~ (.+)=(.+) ]]; then
      rename_context "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
    else
      local ctx_list ctx_to_set
      ctx_list=$(get_contexts) || exit_err "error getting context list"
      ctx_to_set=$(echo "${ctx_list}" | grep "${1}" | head -1 || :)
      [ -z "${ctx_to_set}" ] && { exit_err "cluster or project ${1} did not match anything"; }
      set_context "${ctx_to_set}"
    fi
  else
    usage
    exit 1
  fi
}

main "$@"
